# Initialize autoconf & automake
AC_PREREQ([2.64])
AC_INIT([Wayland], [0.1],
	[https://bugs.freedesktop.org/enter_bug.cgi?product=wayland],
	[wayland], [http://wayland.freedesktop.org/])
AC_CONFIG_MACRO_DIR([m4])
AM_INIT_AUTOMAKE([1.11 foreign dist-bzip2])
AM_SILENT_RULES([yes])
AC_CONFIG_SRCDIR([wayland/wayland-client.h])

# Check for programs
AC_PROG_CC
PKG_PROG_PKG_CONFIG

# Initialize libtool
LT_PREREQ([2.2])
LT_INIT

# Enable gcc options
WAYLAND_GCC_OPTIONS([-Wall -g -Wstrict-prototypes -Wmissing-prototypes -fvisibility=hidden])

# Check Wayland prerequisites
PKG_CHECK_MODULES([FFI], [libffi])

# signalfd & timerfd: Linux 2.6.22 [8 July 2007]
AC_CHECK_HEADERS([sys/signalfd.h sys/timerfd.h])

# Compositor option
AC_ARG_ENABLE([compositor],
	[AC_HELP_STRING([--enable-compositor],
		[enable the test compositor @<:@default=auto@:>@])],,
	[enableval=auto])
AC_CACHE_CHECK([if the test compositor is enabled],
	[wayland_cv_enable_compositor],
	[wayland_cv_enable_compositor="$enableval"])
if test "x$wayland_cv_enable_compositor" != "xno"; then
	WAYLAND_COMPOSITOR=compositor
	PKG_CHECK_MODULES([COMPOSITOR],
		[egl glesv2 gdk-pixbuf-2.0 libudev >= 136 libdrm >= 2.4.17 xcb-dri2 xcb-xfixes],
		[],
		[WAYLAND_COMPOSITOR=
		wayland_cv_enable_compositor=no])
	# workaround a bug in xcb-dri2 generated by xcb-proto 1.6
	AC_CHECK_LIB([xcb-dri2], [xcb_dri2_connect_alignment_pad], [],
		[AC_DEFINE([XCB_DRI2_CONNECT_DEVICE_NAME_BROKEN], [1],
			[Define to 1 if xcb_dri2_connect_device_name is broken])])
fi
AC_SUBST([WAYLAND_COMPOSITOR])

# Clients option
AC_ARG_ENABLE([clients],
	[AC_HELP_STRING([--enable-clients],
		[enable the test clients @<:@default=auto@:>@])],,
	[enableval=auto])
AC_CACHE_CHECK([if the test clients are enabled],
	[wayland_cv_enable_clients],
	[wayland_cv_enable_clients="$enableval"])
if test "x$wayland_cv_enable_clients" != "xno"; then
	WAYLAND_CLIENTS=clients
	PKG_CHECK_MODULES([CLIENT],
		[egl gl cairo gdk-pixbuf-2.0 glib-2.0 gobject-2.0 xkbcommon libdrm],
		[],
		[WAYLAND_CLIENTS=
		wayland_cv_enable_clients=no])
	PKG_CHECK_MODULES([POPPLER], [poppler-glib gdk-2.0],
		[],
		[WAYLAND_CLIENTS=
		wayland_cv_enable_clients=no])
	PKG_CHECK_MODULES([CAIRO_GL], [cairo-gl],
		[AC_DEFINE([HAVE_CAIRO_GL], [1],
			[Define to 1 if cairo-gl is available])],
		[:])
fi
AC_SUBST([WAYLAND_CLIENTS])

# Configure the Wayland scanner
AM_CONDITIONAL([CROSS_COMPILING], [test "x$cross_compiling" = "xyes"])
if test "x$cross_compiling" = "xyes"; then
	AC_ARG_VAR([WAYLAND_SCANNER],
		[Set the full path to the Wayland scanner when cross-compiling])
	AC_PATH_PROG([WAYLAND_SCANNER], [wayland-scanner])
	if test "x$WAYLAND_SCANNER" = "x"; then
		AC_MSG_WARN([A native version of wayland-scanner is required when cross-compiling])
		wayland_scanner=wayland-scanner
	else
		wayland_scanner=$WAYLAND_SCANNER
	fi
else
	AC_ARG_WITH([expat],
		[AC_HELP_STRING([--with-expat=PREFIX],
			[Use Expat from PREFIX/include and PREFIX/lib])],
		[if test "x$withval" = "xyes"; then
			AC_MSG_WARN(['--with-expat' requires an argument.])
		else
			if test -d "$withval"; then
				CPPFLAGS="$CPPFLAGS -I$withval/include"
				LDFLAGS="$LDFLAGS -L$withval/lib"
			else
				AC_MSG_WARN(['--with-expat': $withval is not a directory])
			fi
		fi])
	AC_CHECK_HEADERS([expat.h], [],
		[AC_MSG_ERROR([Unable to find Expat header file; See http://expat.sourceforge.net/])])
	AC_CHECK_LIB([expat], [XML_ParserCreate], [],
		[AC_MSG_ERROR([Unable to find Expat library; See http://expat.sourceforge.net/])])
	wayland_scanner='$(top_builddir)/wayland/wayland-scanner'
fi
AC_SUBST([wayland_scanner])

# Output files
AC_CONFIG_HEADERS([config.h])
AC_CONFIG_FILES([
	clients/Makefile
	compositor/Makefile
	data/Makefile
	Makefile
	wayland/Makefile
	wayland/wayland-server.pc
	wayland/wayland-client.pc])
AC_OUTPUT
AC_MSG_RESULT([
$PACKAGE_NAME build options
	Host: $host
	Version: $VERSION
	Compositor: $wayland_cv_enable_compositor
	Clients: $wayland_cv_enable_clients
])
